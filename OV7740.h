/* SPDX-License-Identifier: GPL-2.0+ */
#ifndef OV7740_H
#define OV7740_H
// Local typedefs

// Local definitions

// Local functions

// Local variables

// VCAM settings

static const UCHAR I2CDataInitPart1[][2] = {
	{ 0x12, 0x80 },
	{ 0x13, 0x00 },
	{ 0x11, 0x01 },
	{ 0x12, 0x00 },
	{ 0xD5, 0x10 },
	{ 0x0C, 0xC2 },		/*mirror and flip function control, enable flip and mirror */

/*
 *  0x0C REG0C 0x02 RW
 * Bit[7]: Flip enable
 * 0: Disable flip
 * 1: Enable flip
 * Bit[6]: Mirror enable
 * 0: Mirror disable
 * 1: Mirror enable
 * Bit[5]: Not used
 * Bit[4]: YUV output, Y ?UV swap
 * 0: YUYVYUYV
 * 1: UYVYUYVY
 * Bit[3]: High 8-bit MSB and LSB swap
 * 0: Output
 * [Y9,Y8�Y3,Y2,Y1,Y0]
 * 1: Output
 * [Y2,Y3�Y8,Y9,Y1,Y0]
 * Bit[2:1]: Max exposure =
 * frame length � limit � 2
 * Bit[0]: Array color bar
 */

	{ 0x0D, 0x34 },
	{ 0x16, 0x01 },		/*move horizontal start position 1 byte */
/*
 * 0x16 REG16 0x00 RW
 * Bit[7]: Analog setting
 * Changing this value is not
 * recommended
 * Bit[6]: Not used
 * Bit[5]: Sensor vertical output size
 * 1 LSBs
 * Bit[4:3]: Sensor horizontal output size 2
 * LSB
 * Bit[2]: Sensor vertical output start point 1
 * LSB
 * Bit[1:0]: Sensor horizontal output start point
 * 2 LSBs
 */
	{ 0x17, 0x25 },
	/*
	 *         0x17 AHSTART 0x2A RW
	 *         Sensor Horizontal Output Start Point 8 MSBs
	 *         (LSBs in REG16[1:0] (0x16))
	 */
	{ 0x18, 0xA0 },
	{ 0x19, 0x03 },
	{ 0x1A, 0xF0 },
	{ 0x1B, 0x89 },
	{ 0x22, 0x03 },
	{ 0x29, 0x17 },
	{ 0x2B, 0xF8 },
	{ 0x2C, 0x01 },
	{ 0x31, 0xA0 },
	{ 0x32, 0xF0 },
	{ 0x33, 0xC4 },
	{ 0x35, 0x05 },
	{ 0x36, 0x3F },
	{ 0x04, 0x60 },
	{ 0x27, 0x80 },
	{ 0x3D, 0x0F },
	{ 0x3E, 0x81 },
	{ 0x3F, 0x40 },
	{ 0x40, 0x7F },
	{ 0x41, 0x6A },
	{ 0x42, 0x29 },
	{ 0x44, 0xE5 },
	{ 0x45, 0x41 },
	{ 0x47, 0x42 },
	{ 0x48, 0x00 },
	{ 0x49, 0x61 },
	{ 0x4A, 0xA1 },
	{ 0x4B, 0x5E },
	{ 0x4C, 0x18 },
	{ 0x4D, 0x50 },
	{ 0x4E, 0x13 },
	{ 0x64, 0x00 },
	{ 0x67, 0x88 },
	{ 0x68, 0x1A },
	{ 0x14, 0x38 },
	{ 0x24, 0x4B },
	{ 0x25, 0x3F },
	{ 0x26, 0x72 },
	{ 0x50, 0x97 },
	{ 0x51, 0x7E },
	{ 0x52, 0x00 },
	{ 0x53, 0x00 },
	{ 0x20, 0x00 },
	{ 0x21, 0x23 },
	{ 0x38, 0x14 },
	{ 0xE9, 0x00 },
	{ 0x56, 0x55 },
	{ 0x57, 0xFF },
	{ 0x58, 0xFF },
	{ 0x59, 0xFF },
	{ 0x5F, 0x04 },
	{ 0xEC, 0x00 },
	{ 0x13, 0xFF },
	{ 0x80, 0x7D },
	{ 0x81, 0x3F },
	{ 0x82, 0x32 },
	{ 0x83, 0x01 },
	{ 0x38, 0x11 },
	{ 0x84, 0x70 },
	{ 0x85, 0x00 },
	{ 0x86, 0x03 },
	{ 0x87, 0x01 },
	{ 0x88, 0x05 },
	{ 0x89, 0x30 },
	{ 0x8D, 0x30 },
	{ 0x8F, 0x85 },
	{ 0x93, 0x30 },
	{ 0x95, 0x85 },
	{ 0x99, 0x30 },
	{ 0x9B, 0x85 },
	{ 0x9C, 0x08 },
	{ 0x9D, 0x12 },
	{ 0x9E, 0x23 },
	{ 0x9F, 0x45 },
	{ 0xA0, 0x55 },
	{ 0xA1, 0x64 },
	{ 0xA2, 0x72 },
	{ 0xA3, 0x7F },
	{ 0xA4, 0x8B },
	{ 0xA5, 0x95 },
	{ 0xA6, 0xA7 },
	{ 0xA7, 0xB5 },
	{ 0xA8, 0xCB },
	{ 0xA9, 0xDD },
	{ 0xAA, 0xEC },
	{ 0xAB, 0x1A },
	{ 0xCE, 0x78 },
	{ 0xCF, 0x6E },
	{ 0xD0, 0x0A },
	{ 0xD1, 0x0C },
	{ 0xD2, 0x84 },
	{ 0xD3, 0x90 },
	{ 0xD4, 0x1E },
	{ 0x5A, 0x24 },
	{ 0x5B, 0x1F },
	{ 0x5C, 0x88 },
	{ 0x5D, 0x60 },
	{ 0xAC, 0x6E },
	{ 0xBE, 0xFF },
	{ 0xBF, 0x00 },
	{ 0x70, 0x00 },
	{ 0x71, 0x34 },
	{ 0x74, 0x28 },
	{ 0x75, 0x98 },
	{ 0x76, 0x00 },
	{ 0x77, 0x08 },
	{ 0x78, 0x01 },
	{ 0x79, 0xC2 },
	{ 0x7D, 0x02 },
	{ 0x7A, 0x4E },
	{ 0x7B, 0x1F },
	{ 0xEC, 0x00 },
	{ 0x7C, 0x0C },
	{ 0x31, 0xA0 },
	{ 0x32, 0xF0 },
	{ 0x82, 0x32 },
	{ 0x11, 0x03 },
	{ 0x50, 0xFF },
	{ 0x51, 0x7E },
	{ 0x52, 0xF0 },
	{ 0x53, 0x00 },
	{ 0x20, 0x00 },
	{ 0x21, 0x84 },
	{ 0xEC, 0xC0 },
	{ 0x8D, 0x7F },
	{ 0x8F, 0x84 },
	{ 0x93, 0x60 },
	{ 0x95, 0x84 },
	{ 0x99, 0x50 },
	{ 0x9B, 0x84 },
	{ 0xEC, 0x40 },
	{ 0x11, 0x01 },
	{ 0x55, 0x40 },
	{ 0x2B, 0x5E },
	{ 0x2C, 0x02 },
	{ 0x13, 0xFF },
	{ 0x50, 0x97 },
	{ 0x51, 0x7E },
	{ 0x52, 0x00 },
	{ 0x21, 0x23 },
	{ 0xEC, 0x40 },
	{ 0x81, 0x3F },
	{ 0xDA, 0x04 },
	{ 0xE4, 0x0E },
	{ 0xE3, 0x10 },
	{ 0x13, 0xFF },
	{ 0x01, 0x84 },
	{ 0x02, 0x4C },
	{ 0x03, 0x40 },
	{ 0x15, 0x00 },
	{ 0x2D, 0x00 },
	{ 0x2E, 0x00 },
	{ 0x80, 0x7F },
	{ 0x81, 0x7F },
	{ 0xDA, 0x06 },
	{ 0xDD, 0x50 },
	{ 0xDE, 0x50 },

};

static const UCHAR I2CDataStandByEnter[][2] = {
	{ 0x0E, 0xE8 },
};

static const UCHAR I2CDataStandByExit[][2] = {
	{ 0x0E, 0xE0 },
};

static const UCHAR ov7740_mirror_on_reg[][2] = { { 0x0c, 0x40 } };

static const UCHAR ov7740_mirror_off_reg[][2] = { { 0x0c, 0x00 } };

#endif
